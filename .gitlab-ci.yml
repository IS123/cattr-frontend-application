variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

stages:
  - build
  - test
  - deploy

sast:
  stage: test

sentry:
  image: getsentry/sentry-cli:latest
  stage: deploy
  only:
    - tags
  script:
    - export APP_VERSION=$(echo "$CI_COMMIT_TAG" | sed 's/^v//g')
    - sentry-cli releases new --finalize $APP_VERSION
    - sentry-cli releases set-commits --auto $APP_VERSION

build:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:20
  stage: build
  tags:
    - privileged
  except:
    - tags
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:20-dind
      alias: docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - export APP_VERSION=$(echo "$CI_COMMIT_TAG" | sed 's/^v//g')
  script:
    - docker build -t $CONTAINER_IMAGE --build-arg APP_VERSION=$APP_VERSION --build-arg SENTRY_DSN=$SENTRY_DSN .
    - docker push $CONTAINER_IMAGE

mark_release:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:20
  stage: deploy
  tags:
    - privileged
  only:
    - tags
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:20-dind
      alias: docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - export APP_VERSION=$(echo "$CI_COMMIT_TAG" | sed 's/^v//g')
  script:
    - docker pull $CONTAINER_IMAGE
    - docker image tag $CONTAINER_IMAGE $CI_REGISTRY_IMAGE:$APP_VERSION
    - docker image tag $CONTAINER_IMAGE $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION
    - docker push $CI_REGISTRY_IMAGE:latest

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
